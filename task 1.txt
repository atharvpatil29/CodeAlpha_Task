#include <iostream>
#include <vector>
#include <string>

struct Task {
    std::string description;
    bool isCompleted;

    Task(const std::string& desc) : description(desc), isCompleted(false) {}
};

class ToDoList {
private:
    std::vector<Task> tasks;

public:
    void addTask(const std::string& description) {
        tasks.emplace_back(description);
        std::cout << "Task added: " << description << "\n";
    }

    void markTaskCompleted(int taskNumber) {
        if (taskNumber > 0 && taskNumber <= tasks.size()) {
            tasks[taskNumber - 1].isCompleted = true;
            std::cout << "Task " << taskNumber << " marked as completed.\n";
        } else {
            std::cout << "Invalid task number.\n";
        }
    }

    void viewTasks() const {
        if (tasks.empty()) {
            std::cout << "No tasks available.\n";
            return;
        }

        std::cout << "\nCurrent Tasks:\n";
        for (size_t i = 0; i < tasks.size(); ++i) {
            std::cout << i + 1 << ". " << tasks[i].description
                      << (tasks[i].isCompleted ? " [Completed]" : "") << "\n";
        }
    }
};

int main() {
    ToDoList todoList;
    int choice;

    do {
        std::cout << "\nTo-Do List Application\n";
        std::cout << "1. Add Task\n";
        std::cout << "2. Mark Task as Completed\n";
        std::cout << "3. View Tasks\n";
        std::cout << "4. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;
        std::cin.ignore(); // To ignore leftover newline character

        switch (choice) {
        case 1: {
            std::string description;
            std::cout << "Enter task description: ";
            std::getline(std::cin, description);
            todoList.addTask(description);
            break;
        }
        case 2: {
            int taskNumber;
            std::cout << "Enter task number to mark as completed: ";
            std::cin >> taskNumber;
            todoList.markTaskCompleted(taskNumber);
            break;
        }
        case 3:
            todoList.viewTasks();
            break;
        case 4:
            std::cout << "Exiting the application. Goodbye!\n";
            break;
        default:
            std::cout << "Invalid choice. Please try again.\n";
        }

    } while (choice != 4);

    return 0;
}